{"ast":null,"code":"var _asyncToGenerator = require(\"C:\\\\Users\\\\59162\\\\Documents\\\\proyecto_angular\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar _this = this;\n\nconst createJob = require('./createJob');\n\nconst {\n  log\n} = require('./utils/log');\n\nconst getId = require('./utils/getId');\n\nlet schedulerCounter = 0;\n\nmodule.exports = () => {\n  const id = getId('Scheduler', schedulerCounter);\n  const workers = {};\n  const runningWorkers = {};\n  let jobQueue = [];\n  schedulerCounter += 1;\n\n  const getQueueLen = () => jobQueue.length;\n\n  const getNumWorkers = () => Object.keys(workers).length;\n\n  const dequeue = () => {\n    if (jobQueue.length !== 0) {\n      const wIds = Object.keys(workers);\n\n      for (let i = 0; i < wIds.length; i += 1) {\n        if (typeof runningWorkers[wIds[i]] === 'undefined') {\n          jobQueue[0](workers[wIds[i]]);\n          break;\n        }\n      }\n    }\n  };\n\n  const queue = (action, payload) => new Promise((resolve, reject) => {\n    const job = createJob({\n      action,\n      payload\n    });\n    jobQueue.push( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (w) {\n        jobQueue.shift();\n        runningWorkers[w.id] = job;\n\n        try {\n          resolve(yield w[action].apply(_this, [...payload, job.id]));\n        } catch (err) {\n          reject(err);\n        } finally {\n          delete runningWorkers[w.id];\n          dequeue();\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    log(`[${id}]: Add ${job.id} to JobQueue`);\n    log(`[${id}]: JobQueue length=${jobQueue.length}`);\n    dequeue();\n  });\n\n  const addWorker = w => {\n    workers[w.id] = w;\n    log(`[${id}]: Add ${w.id}`);\n    log(`[${id}]: Number of workers=${getNumWorkers()}`);\n    dequeue();\n    return w.id;\n  };\n\n  const addJob = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (action, ...payload) {\n      if (getNumWorkers() === 0) {\n        throw Error(`[${id}]: You need to have at least one worker before adding jobs`);\n      }\n\n      return queue(action, payload);\n    });\n\n    return function addJob(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  const terminate = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      Object.keys(workers).forEach( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (wid) {\n          yield workers[wid].terminate();\n        });\n\n        return function (_x3) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n      jobQueue = [];\n    });\n\n    return function terminate() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return {\n    addWorker,\n    addJob,\n    terminate,\n    getQueueLen,\n    getNumWorkers\n  };\n};","map":null,"metadata":{},"sourceType":"script"}