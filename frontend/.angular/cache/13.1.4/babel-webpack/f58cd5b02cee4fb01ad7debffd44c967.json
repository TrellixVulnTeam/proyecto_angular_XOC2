{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@auth0/angular-jwt\"; // import { EventEmitter } from 'stream';\n\nexport let UserserviceService = /*#__PURE__*/(() => {\n  class UserserviceService {\n    // cbImage: EventEmitter= new EventEmitter();\n    constructor(http, router, jwthelper) {\n      this.http = http;\n      this.router = router;\n      this.jwthelper = jwthelper;\n    }\n\n    addUser(datos) {\n      return this.http.post(\"http://localhost:3000/usuarios\", datos);\n    }\n\n    addcabecera_datos(datos) {\n      return this.http.post(\"http://localhost:3000/datos_cabecera\", datos);\n    }\n\n    add_linea_cabecera_datos(datos) {\n      return this.http.post(\"http://localhost:3000/lineas_datos_cabecera\", datos);\n    }\n\n    getUser() {\n      return this.http.get(\"http://localhost:3000/usuarios\");\n    }\n\n    deleteUser(id) {\n      return this.http.delete(`http://localhost:3000/usuarios/${id}`);\n    }\n\n    editarUser(id, datos) {\n      return this.http.put(`http://localhost:3000/usuarios/${id}`, datos);\n    }\n\n    obtenerUser(id) {\n      return this.http.get(`http://localhost:3000/usuarios/${id}`);\n    }\n\n    login(datos) {\n      return this.http.post(`http://localhost:3000/login`, datos);\n    }\n\n    get_usuario(id) {\n      return this.http.get(`http://localhost:3000/usuario/${id}`);\n    }\n\n    put_usuario(id, datos) {\n      return this.http.put(`http://localhost:3000/usuarios/${id}`, datos);\n    }\n\n    obtenerdatosjson_base64(file) {\n      const filename = this.DataURIToBlob(file);\n      const formData = new FormData();\n      formData.append('file', filename);\n      return this.http.post(`http://localhost:3002/api/analyze`, formData);\n    }\n\n    obtenerdatosjson(file) {\n      const formData = new FormData();\n      formData.append(\"file\", file, file.name);\n      return this.http.post(`http://localhost:3002/api/analyze`, formData);\n    }\n\n    DataURIToBlob(dataURI) {\n      const splitDataURI = dataURI.split(',');\n      const byteString = splitDataURI[0].indexOf('base64') >= 0 ? atob(splitDataURI[1]) : decodeURI(splitDataURI[1]);\n      const mimeString = splitDataURI[0].split(':')[1].split(';')[0];\n      const ia = new Uint8Array(byteString.length);\n\n      for (let i = 0; i < byteString.length; i++) ia[i] = byteString.charCodeAt(i);\n\n      return new Blob([ia], {\n        type: mimeString\n      });\n    }\n\n    isAuth() {\n      const token = localStorage.getItem('token');\n\n      if (this.jwthelper.isTokenExpired(token) || !localStorage.getItem('token')) {\n        return false;\n      }\n\n      return true;\n    }\n\n  }\n\n  UserserviceService.ɵfac = function UserserviceService_Factory(t) {\n    return new (t || UserserviceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.JwtHelperService));\n  };\n\n  UserserviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserserviceService,\n    factory: UserserviceService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserserviceService;\n})();","map":null,"metadata":{},"sourceType":"module"}