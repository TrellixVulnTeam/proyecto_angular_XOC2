{"ast":null,"code":"var _asyncToGenerator = require(\"C:\\\\Users\\\\59162\\\\Documents\\\\proyecto_angular\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nconst resolvePaths = require('./utils/resolvePaths');\n\nconst circularize = require('./utils/circularize');\n\nconst createJob = require('./createJob');\n\nconst {\n  log\n} = require('./utils/log');\n\nconst getId = require('./utils/getId');\n\nconst {\n  defaultOEM\n} = require('./constants/config');\n\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({ ...defaultOptions,\n    ..._options\n  });\n  const resolves = {};\n  const rejects = {};\n  let worker = spawnWorker(options);\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({\n    id: jobId,\n    action,\n    payload\n  }) => new Promise((resolve, reject) => {\n    log(`[${id}]: Start ${jobId}, action=${action}`);\n    setResolve(action, resolve);\n    setReject(action, reject);\n    send(worker, {\n      workerId: id,\n      jobId,\n      action,\n      payload\n    });\n  });\n\n  const load = jobId => startJob(createJob({\n    id: jobId,\n    action: 'load',\n    payload: {\n      options\n    }\n  }));\n\n  const writeText = (path, text, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'writeFile',\n      args: [path, text]\n    }\n  }));\n\n  const readText = (path, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'readFile',\n      args: [path, {\n        encoding: 'utf8'\n      }]\n    }\n  }));\n\n  const removeFile = (path, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'unlink',\n      args: [path]\n    }\n  }));\n\n  const FS = (method, args, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method,\n      args\n    }\n  }));\n\n  const loadLanguage = (langs = 'eng', jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs,\n      options\n    }\n  }));\n\n  const initialize = (langs = 'eng', oem = defaultOEM, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'initialize',\n    payload: {\n      langs,\n      oem\n    }\n  }));\n\n  const setParameters = (params = {}, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'setParameters',\n    payload: {\n      params\n    }\n  }));\n\n  const recognize = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (image, opts = {}, jobId) {\n      return startJob(createJob({\n        id: jobId,\n        action: 'recognize',\n        payload: {\n          image: yield loadImage(image),\n          options: opts\n        }\n      }));\n    });\n\n    return function recognize(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'getPDF',\n    payload: {\n      title,\n      textonly\n    }\n  }));\n\n  const detect = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (image, jobId) {\n      return startJob(createJob({\n        id: jobId,\n        action: 'detect',\n        payload: {\n          image: yield loadImage(image)\n        }\n      }));\n    });\n\n    return function detect(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  const terminate = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (worker !== null) {\n        /*\n        await startJob(createJob({\n          id: jobId,\n          action: 'terminate',\n        }));\n        */\n        terminateWorker(worker);\n        worker = null;\n      }\n\n      return Promise.resolve();\n    });\n\n    return function terminate() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  onMessage(worker, ({\n    workerId,\n    jobId,\n    status,\n    action,\n    data\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data,\n          length: Object.keys(data).length\n        });\n      }\n\n      resolves[action]({\n        jobId,\n        data: d\n      });\n    } else if (status === 'reject') {\n      rejects[action](data);\n\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data,\n        userJobId: jobId\n      });\n    }\n  });\n  return {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate\n  };\n};","map":null,"metadata":{},"sourceType":"script"}