{"ast":null,"code":"var _asyncToGenerator = require(\"C:\\\\Users\\\\59162\\\\Documents\\\\proyecto_angular\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nconst resolveURL = require('resolve-url');\n\nconst blueimpLoadImage = require('blueimp-load-image');\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\n\n\nconst readFromBlobOrFile = blob => new Promise((resolve, reject) => {\n  const fileReader = new FileReader();\n\n  fileReader.onload = () => {\n    resolve(fileReader.result);\n  };\n\n  fileReader.onerror = ({\n    target: {\n      error: {\n        code\n      }\n    }\n  }) => {\n    reject(Error(`File could not be read! Code=${code}`));\n  };\n\n  fileReader.readAsArrayBuffer(blob);\n});\n\nconst fixOrientationFromUrlOrBlobOrFile = blob => new Promise(resolve => {\n  blueimpLoadImage(blob, img => img.toBlob(resolve), {\n    orientation: true,\n    canvas: true\n  });\n});\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\n\n\nconst loadImage = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (image) {\n    let data = image;\n\n    if (typeof image === 'undefined') {\n      return 'undefined';\n    }\n\n    if (typeof image === 'string') {\n      if (image.endsWith('.pbm')) {\n        const resp = yield fetch(resolveURL(image));\n        data = yield resp.arrayBuffer();\n      } else {\n        let img = image; // If not Base64 Image\n\n        if (!/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n          img = resolveURL(image);\n        }\n\n        data = yield readFromBlobOrFile(yield fixOrientationFromUrlOrBlobOrFile(img));\n      }\n    } else if (image instanceof HTMLElement) {\n      if (image.tagName === 'IMG') {\n        data = yield loadImage(image.src);\n      }\n\n      if (image.tagName === 'VIDEO') {\n        data = yield loadImage(image.poster);\n      }\n\n      if (image.tagName === 'CANVAS') {\n        yield new Promise(resolve => {\n          image.toBlob( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(function* (blob) {\n              data = yield readFromBlobOrFile(blob);\n              resolve();\n            });\n\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n        });\n      }\n    } else if (image instanceof File || image instanceof Blob) {\n      let img = image;\n\n      if (!image.name.endsWith('.pbm')) {\n        img = yield fixOrientationFromUrlOrBlobOrFile(img);\n      }\n\n      data = yield readFromBlobOrFile(img);\n    }\n\n    return new Uint8Array(data);\n  });\n\n  return function loadImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = loadImage;","map":null,"metadata":{},"sourceType":"script"}